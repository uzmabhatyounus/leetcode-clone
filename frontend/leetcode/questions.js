 const questions1 = [
  {
    id: 1,
    title: "Two Sum",
    question: "Find two indices that add up to a target.",
    description: "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    inputDescription: "nums: number[], target: number",
    outputDescription: "number[] — two indices",
    difficulty: "Easy",
    acceptance: "45.3%",
    examples: [{ input: { nums: [2,7,11,15], target: 4 }, output: [0,1] }],
  },
  {
    id: 2,
    title: "Reverse Integer",
    question: "Reverse digits of an integer.",
    description: "Given a signed 32-bit integer x, return x with its digits reversed. Return 0 if reversal causes overflow.",
    inputDescription: "x: number",
    outputDescription: "number",
    difficulty: "Medium",
    acceptance: "27.6%",
    examples: [{ input: { x: 123 }, output: 321 }],
  },
  {
    id: 3,
    title: "Palindrome Number",
    question: "Check if integer reads same forwards/backwards.",
    description: "Given an integer x, return true if x is palindrome integer.",
    inputDescription: "x: number",
    outputDescription: "boolean",
    difficulty: "Easy",
    acceptance: "54.7%",
    examples: [{ input: { x: 121 }, output: true }],
  },
  {
    id: 4,
    title: "Roman to Integer",
    question: "Convert Roman numeral to integer.",
    description: "Convert a roman numeral string to an integer.",
    inputDescription: "s: string",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "61.2%",
    examples: [{ input: { s: "MCMXCIV" }, output: 1994 }],
  },
  {
    id: 5,
    title: "Longest Common Prefix",
    question: "Find longest common prefix among strings.",
    description: "Write a function to find the longest common prefix string amongst an array of strings. Return empty if none.",
    inputDescription: "strs: string[]",
    outputDescription: "string",
    difficulty: "Easy",
    acceptance: "39.9%",
    examples: [{ input: { strs: ["flower","flow","flight"] }, output: "fl" }],
  },
  {
    id: 6,
    title: "Valid Parentheses",
    question: "Check if parentheses string is valid.",
    description: "Given a string s containing just the characters '(',')','{','}','[' and ']', determine if it’s valid.",
    inputDescription: "s: string",
    outputDescription: "boolean",
    difficulty: "Easy",
    acceptance: "41.1%",
    examples: [{ input: { s: "()[]{}" }, output: true }],
  },
  {
    id: 7,
    title: "Merge Two Sorted Lists",
    question: "Merge two sorted linked lists.",
    description: "Merge two sorted linked lists and return it as a sorted list.",
    inputDescription: "l1: ListNode, l2: ListNode",
    outputDescription: "ListNode",
    difficulty: "Easy",
    acceptance: "57.8%",
    examples: [{ input: { l1: [1,2,4], l2: [1,3,4] }, output: [1,1,2,3,4,4] }],
  },
  {
    id: 8,
    title: "Max Subarray",
    question: "Find subarray with maximum sum.",
    description: "Find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    inputDescription: "nums: number[]",
    outputDescription: "number",
    difficulty: "Medium",
    acceptance: "49.2%",
    examples: [{ input: { nums: [-2,1,-3,4,-1,2,1,-5,4] }, output: 6 }],
  },
  {
    id: 9,
    title: "Length of Last Word",
    question: "Return length of last word in a string.",
    description: "Given a string s consisting of words and spaces, return the length of the last word in the string.",
    inputDescription: "s: string",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "39.5%",
    examples: [{ input: { s: "Hello World " }, output: 5 }],
  },
  {
    id: 10,
    title: "Plus One",
    question: "Add one to a number represented by digits.",
    description: "Given a large integer represented as an integer array digits, increment one and return the array.",
    inputDescription: "digits: number[]",
    outputDescription: "number[]",
    difficulty: "Easy",
    acceptance: "43.7%",
    examples: [{ input: { digits: [1,2,3] }, output: [1,2,4] }],
  },
  {
    id: 11,
    title: "Add Binary",
    question: "Add two binary strings.",
    description: "Given two binary strings, return their sum (also a binary string).",
    inputDescription: "a: string, b: string",
    outputDescription: "string",
    difficulty: "Easy",
    acceptance: "52.1%",
    examples: [{ input: { a: "11", b: "1" }, output: "100" }],
  },
  {
    id: 12,
    title: "Sqrt(x)",
    question: "Compute integer square root.",
    description: "Implement int sqrt(int x). Compute and return the square root of x, truncated to integer.",
    inputDescription: "x: number",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "39.4%",
    examples: [{ input: { x: 8 }, output: 2 }],
  },
  {
    id: 13,
    title: "Climbing Stairs",
    question: "Count ways to climb n stairs.",
    description: "Each time you can climb 1 or 2 steps. Given n, return number of ways to reach the top.",
    inputDescription: "n: number",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "56.2%",
    examples: [{ input: { n: 5 }, output: 8 }],
  },
  {
    id: 14,
    title: "Best Time to Buy and Sell Stock",
    question: "Maximize profit from one transaction.",
    description: "Given prices array, find max profit by choosing a buy and sell day. You cannot sell before you buy.",
    inputDescription: "prices: number[]",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "54.3%",
    examples: [{ input: { prices: [7,1,5,3,6,4] }, output: 5 }],
  },
  {
    id: 15,
    title: "Valid Palindrome",
    question: "Check if string is palindrome ignoring non‑alphanumeric.",
    description: "Given a string, determine if it reads the same forwards and backwards, ignoring non-alphanumeric and case.",
    inputDescription: "s: string",
    outputDescription: "boolean",
    difficulty: "Easy",
    acceptance: "44.6%",
    examples: [{ input: { s: "A man, a plan, a canal: Panama" }, output: true }],
  }
];

const questions2 = [
  {
    id: 16,
    title: "Remove Duplicates from Sorted Array",
    question: "Remove duplicates in-place from a sorted array.",
    description: "Given a sorted array nums, remove the duplicates in-place such that each unique element appears only once.",
    inputDescription: "nums: number[]",
    outputDescription: "number — new length of array with unique elements",
    difficulty: "Easy",
    acceptance: "52.1%",
    examples: [{ input: { nums: [1,1,2] }, output: 2 }],
  },
  {
    id: 17,
    title: "Implement strStr()",
    question: "Find the index of the first occurrence of a substring.",
    description: "Return the index of the first occurrence of needle in haystack, or -1 if not found.",
    inputDescription: "haystack: string, needle: string",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "38.7%",
    examples: [{ input: { haystack: "hello", needle: "ll" }, output: 2 }],
  },
  {
    id: 18,
    title: "Search Insert Position",
    question: "Return the index where target should be inserted.",
    description: "Given a sorted array and a target, return the index if the target is found. If not, return where it would be if inserted.",
    inputDescription: "nums: number[], target: number",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "45.5%",
    examples: [{ input: { nums: [1,3,5,6], target: 5 }, output: 2 }],
  },
  {
    id: 19,
    title: "Count and Say",
    question: "Generate the n-th term of the count-and-say sequence.",
    description: "The count-and-say sequence is a sequence of integers with descriptive rules. Implement a function to return the nth term.",
    inputDescription: "n: number",
    outputDescription: "string",
    difficulty: "Medium",
    acceptance: "38.9%",
    examples: [{ input: { n: 4 }, output: "1211" }],
  },
  {
    id: 20,
    title: "Maximum Depth of Binary Tree",
    question: "Find the maximum depth of a binary tree.",
    description: "Given the root of a binary tree, return its maximum depth.",
    inputDescription: "root: TreeNode",
    outputDescription: "number",
    difficulty: "Easy",
    acceptance: "72.4%",
    examples: [{ input: { root: [3,9,20,null,null,15,7] }, output: 3 }],
  },
  {
    id: 21,
    title: "Symmetric Tree",
    question: "Check if a binary tree is symmetric.",
    description: "Given a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
    inputDescription: "root: TreeNode",
    outputDescription: "boolean",
    difficulty: "Easy",
    acceptance: "51.3%",
    examples: [{ input: { root: [1,2,2,3,4,4,3] }, output: true }],
  },
  {
    id: 22,
    title: "Convert Sorted Array to BST",
    question: "Create a height-balanced BST from sorted array.",
    description: "Given an integer array where elements are sorted in ascending order, convert it into a height-balanced BST.",
    inputDescription: "nums: number[]",
    outputDescription: "TreeNode",
    difficulty: "Easy",
    acceptance: "65.1%",
    examples: [{ input: { nums: [-10,-3,0,5,9] }, output: "BST" }],
  },
  {
    id: 23,
    title: "Pascal’s Triangle",
    question: "Generate Pascal's triangle up to numRows.",
    description: "Given a number numRows, generate the first numRows of Pascal’s triangle.",
    inputDescription: "numRows: number",
    outputDescription: "number[][]",
    difficulty: "Easy",
    acceptance: "64.7%",
    examples: [{ input: { numRows: 5 }, output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] }],
  },
  {
    id: 24,
    title: "Valid Sudoku",
    question: "Check if a 9x9 Sudoku board is valid.",
    description: "Determine if a 9x9 Sudoku board is valid. Only filled cells need to be validated.",
    inputDescription: "board: string[][]",
    outputDescription: "boolean",
    difficulty: "Medium",
    acceptance: "55.4%",
    examples: [{ input: { board: [["5","3",".",".","7",".",".",".","."]] }, output: true }],
  },
  {
    id: 25,
    title: "Rotate Image",
    question: "Rotate a matrix 90 degrees clockwise.",
    description: "Given an n x n 2D matrix representing an image, rotate the image in-place by 90 degrees.",
    inputDescription: "matrix: number[][]",
    outputDescription: "void (in-place)",
    difficulty: "Medium",
    acceptance: "68.5%",
    examples: [{ input: { matrix: [[1,2,3],[4,5,6],[7,8,9]] }, output: [[7,4,1],[8,5,2],[9,6,3]] }],
  },
  {
    id: 26,
    title: "Group Anagrams",
    question: "Group strings that are anagrams.",
    description: "Given an array of strings, group the anagrams together.",
    inputDescription: "strs: string[]",
    outputDescription: "string[][]",
    difficulty: "Medium",
    acceptance: "66.2%",
    examples: [{ input: { strs: ["eat","tea","tan","ate","nat","bat"] }, output: [["eat","tea","ate"],["tan","nat"],["bat"]] }],
  },
  {
    id: 27,
    title: "Top K Frequent Elements",
    question: "Return k most frequent elements.",
    description: "Given a non-empty array of integers, return the k most frequent elements.",
    inputDescription: "nums: number[], k: number",
    outputDescription: "number[]",
    difficulty: "Medium",
    acceptance: "64.5%",
    examples: [{ input: { nums: [1,1,1,2,2,3], k: 2 }, output: [1,2] }],
  },
  {
    id: 28,
    title: "Product of Array Except Self",
    question: "Return array of products except self.",
    description: "Given an array nums, return an array output such that output[i] is the product of all nums[j] except nums[i].",
    inputDescription: "nums: number[]",
    outputDescription: "number[]",
    difficulty: "Medium",
    acceptance: "66.3%",
    examples: [{ input: { nums: [1,2,3,4] }, output: [24,12,8,6] }],
  },
  {
    id: 29,
    title: "Find Peak Element",
    question: "Find a peak element in an array.",
    description: "A peak element is greater than its neighbors. Return the index of any one peak element.",
    inputDescription: "nums: number[]",
    outputDescription: "number",
    difficulty: "Medium",
    acceptance: "47.8%",
    examples: [{ input: { nums: [1,2,1,3,5,6,4] }, output: 5 }],
  },
  {
    id: 30,
    title: "Kth Largest Element in an Array",
    question: "Find the k-th largest element.",
    description: "Find the k-th largest element in an unsorted array.",
    inputDescription: "nums: number[], k: number",
    outputDescription: "number",
    difficulty: "Medium",
    acceptance: "66.1%",
    examples: [{ input: { nums: [3,2,1,5,6,4], k: 2 }, output: 5 }],
  }
];

export {questions1,questions2}